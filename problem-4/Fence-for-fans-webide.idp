vocabulary V {

    type Row = { 1..9 } isa nat
    type Col = { 1..5 } isa nat
    type Pos constructed from {p(Row,Col)}
    type Val = {-5..30} isa int
    
    width(Val)
    height(Val)
    cost(Row, Col, Val)
    reward(Row, Col, Val)
    length(Val)
    budget(Val)
    
    path(Pos, Pos)
    adjacent(Pos, Pos)
    fence(Pos)
    
    next(Pos, Pos)
}

theory T : V {

	// Two positions are adjacent if their Manhattan distance is at most one.
    {
        ! r1[Row], r2[Row], c1[Col], c2[Col]: adjacent(p(r1,c1),p(r2,c2)) <- abs(r1-r2)+abs(c1-c2)=<1.
    }
    
    
    // Definition: transitive closure of the next ralation
    {
        ! p1[Pos], p2[Pos]: path(p1,p2) <- next(p1,p2) & fence(p1) & fence(p2).
        ! p1[Pos], p3[Pos]: path(p1,p3) <- ? p2[Pos] : path(p1,p2) & path(p2,p3) & fence(p1) & fence(p2) & fence(p3).
    }
    // Cells that belong to the fence are forming a path!
    ! p1[Pos], p2[Pos]:  fence(p1) & fence(p2) => path(p1,p2).
    
    
    // For each fence cell there is exactly one next cell (No branching)
    ! p1[Pos]: fence(p1) => ?1 p2[Pos]: fence(p2) & next(p1, p2).
    // For each fence cell there is exactly one preceeding cell (No merging)
    ! p1[Pos]: fence(p1) => ?1 p2[Pos]: fence(p2) & next(p2, p1).
    // Next relates only adjacent cells
    ! p1[Pos], p2[Pos]: next(p1, p2) => adjacent(p1, p2).
    
    
    // Redundant constraints for improving the performance
    // Next relates only fences
    ! p1[Pos], p2[Pos]: next(p1, p2) => fence(p1) & fence(p2).  
    // Next is asymmetric
    ! p1[Pos], p2[Pos]: next(p1, p2) => ~next(p2, p1).
    // Next has no identities
    ! p1[Pos]: ~next(p1, p1).

    
    // No fance has 4 (or more) fences next to it
    //! p1[Pos]: fence(p1)=> #{p2[Pos] : p1~=p2 & fence(p2) & adjacent(p1,p2)}=< 3.
    ! p1[Pos]: fence(p1)=> #{p2[Pos] : fence(p2) & adjacent(p1,p2)} < 5.

	// There is a fance that has exactly 2 adjancent fances (= 3 including itself)
    // Consequence of this is that cycle is non-empty
    ? p1[Pos]: fence(p1) & #{p2[Pos] : fence(p2) & adjacent(p1,p2)} = 3.
    
    // There is a fance that has exactly 3 adjancent fances (= 4 including itself)
    // Consequence of this is that cycle is non-trivial
    ? p1[Pos]: fence(p1) & #{p2[Pos] : fence(p2) & adjacent(p1,p2)} = 4.
    
    
	// No negative rewards in the cycle!
    ~? r[Row], c[Col]: fence(p(r,c)) & reward(r, c, -1).
    
    // Max cycle length requirement
    ! x[Val]: length(x) => #{p[Pos] : fence(p)} =< x.
    
    // Max cycle budget requirement
    ! x[Val]: budget(x) => sum{r[Row], c[Col], v[Val]: fence(p(r,c)) & cost(r,c,v): v} =< x.  
}



// Vocabulary serving for loading data
include "./scienceweek/iclp-cp-2024/problem-4/data-vocabulary.idp"

// Select the instance of the task
include "./scienceweek/iclp-cp-2024/problem-4/instance01.idp"
// include "./scienceweek/iclp-cp-2024/problem-4/instance02.idp"
// include "./scienceweek/iclp-cp-2024/problem-4/instance03.idp"
// include "./scienceweek/iclp-cp-2024/problem-4/instance04.idp"
// include "./scienceweek/iclp-cp-2024/problem-4/instance05.idp"


// Term to be optimized
term t: V {
    sum{r[Row], c[Col], re[Val], co[Val]: fence(p(r,c)) & reward(r,c,re) & cost(r,c,co) : re - co}
}


procedure main(){
    stdoptions.cpsupport = true
    // Find the optimal solution by maximizing term t
    printmodels(maximize(T,S,t))
}
